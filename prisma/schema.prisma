// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id            String      @id @default(uuid())
  email         String      @unique(map: "User.email_unique")
  password      String
  firstName     String
  lastName      String
  mobilePhone   String


  role          Role        @default(USER)
  bookings      Booking[]
  sessions      Session[]
    @@map("user")
}

enum Role {
  ADMIN
  USER
}


model Session {
  id                String   @id @default(uuid())
  createdAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  expirationDate    DateTime?
  @@map("session")
}
model Store {
  id                String      @id @default(uuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  name              String
  address           String
  city              String
  postalCode        String
  country           String
  phone             String
  email             String
  storeServices     StoreServices[]
  bookings          Booking[]
  @@map("store")
}

model StoreServices {
    id        String        @id @default(uuid())
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt
    name      String
    price     Int
    store     Store         @relation(fields: [storeId], references: [id], onDelete: Cascade)
    storeId   String
    services  Service[]
    enabled   Boolean       @default(true)
    @@map("store_services")

}

model Service {
    id              String            @id @default(uuid())
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    duration        Int?
    storeService    StoreServices     @relation(fields: [storeServiceId], references: [id], onDelete: Cascade)
    storeServiceId  String
    booking         Booking?          @relation(fields: [bookingId], references: [id], onDelete: Cascade)
    bookingId       String?
    @@map("services")
}

model Booking {
  id        String      @id @default(uuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  services  Service[]
  store     Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId   String
  start     DateTime
  end       DateTime
  @@map("bookings")
}
